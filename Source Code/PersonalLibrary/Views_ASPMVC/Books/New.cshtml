@model PersonalLibrary.Models.ViewModels.NewBookFormViewModel

@{
    ViewBag.Title = "New Book";
}


@{
    using (Html.BeginForm("Save", "Books", FormMethod.Post, new { @class = "form-control" }))
    {
        <div class="form-group">
            @Html.LabelFor(m => m.Book.Title)
            @Html.TextBoxFor(m => m.Book.Title, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Book.Title)
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Book.Author)
            @Html.TextBoxFor(m => m.Book.Author, new { @class = "form-control" })
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Book.PublicationYear)
            @Html.TextBoxFor(m => m.Book.PublicationYear, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Book.PublicationYear)
        </div>


        @Html.LabelFor(m => m.GenreTypes)
        <div class="form-group form-check">
            @{

                //This works, even though they are both technically the same as an enhanced for loop
                for (int i = 0; i < Model.GenreTypes.Count; i++)
                {
                    @Html.Label(Model.GenreTypes[i].GenreName)
                    @Html.CheckBoxFor(m => Model.GenreTypes[i].IsSelected, new { @class = "form-check-inline" })

                    //Bind the elements in this index to the model to be use by the controller
                    @Html.HiddenFor(m => Model.GenreTypes[i].GenreId)
                    @Html.HiddenFor(m => Model.GenreTypes[i].GenreName)
                }

            }

        </div>

        <!--Avoid Cross-site forgery attack-->
        @Html.AntiForgeryToken()

        <div class="button-form-margins">
            <div class="container">
                <button class="btn btn btn-light" type="submit">Submit</button>
                @Html.ActionLink("Cancel", "Index", "Books", new {@class = "btn btn-light" })

            </div>
        </div>
    }
    

    <!--Within the form add the checkboxed to be added and load them in the genredId as int, check ifthformhas the values added to them -->
}

@Scripts.Render("~/bundles/jqueryval")
